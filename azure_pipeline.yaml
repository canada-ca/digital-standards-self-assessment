trigger: none
pool:
 name: SelfPool
variables:
  AzureSub: 'Azure subscription 1 (1ff6c602-69fe-454f-a795-de22a178a6c0)'
stages:

  - stage: "Pulumi"
    variables:
    - group: dev
    jobs:
    - job: "SetupPulumiBackend"
      steps:
        - task: AzureCLI@2
          env:
              ENV_NAME: $(ENV)
              PULUMI_CONFIG_PASSPHRASE: $(pass)
          inputs:
            azureSubscription: $(AzureSub)
            scriptType: 'ps'
            workingDirectory: '$(Build.SourcesDirectory)\infrastructure'
            addSpnToEnvironment: true
            scriptLocation: scriptPath
            scriptPath: '$(Build.SourcesDirectory)\infrastructure\helperScripts\pulumiBackendConfig.ps1'
          name: backend
          displayName: Create Backend 
 
  - stage: "DeployDev"    
    displayName: "Dev Deploy Infra & App"
    dependsOn: Pulumi    
    variables:
    - group: dev
    jobs:
    - job: "Deploy_Infra"
      displayName: "Deploy Azure Resources"
      
      variables:
        BackendStorageKey: $[ stageDependencies.Pulumi.SetupPulumiBackend.outputs['backend.storageKey']]
        BackendContainer: $[ stageDependencies.Pulumi.SetupPulumiBackend.outputs['backend.container']]
        BackendStorageAccount: $[ stageDependencies.Pulumi.SetupPulumiBackend.outputs['backend.saAccount']]
      
      steps:
        - template: templates/deployResources_retrieveOutputs.yaml
          parameters:
            beStorageKey: $(BackendStorageKey)
            beContainer: $(BackendContainer)
            beStorageAccount: $(BackendStorageAccount)
            AzureSub: $(AzureSub)

    - job: "Build_API"
      dependsOn: Deploy_Infra
      condition: succeeded()
      steps:
        - template: templates/build_api.yaml

    - job: "Deploy_API"
      dependsOn: Deploy_Infra
      condition: succeeded()
      variables:
        faName: $[ dependencies.Deploy_Infra.outputs['pulumiOutputs.faName'] ]
      steps:
        - template: templates/deploy_api.yaml
          parameters:
            faName: $(faName)
            AzureSub: $(AzureSub)

    - job: "Configure_API_GW"
      dependsOn: Deploy_Infra
      condition: succeeded()
      variables:
        faName: $[ dependencies.Deploy_Infra.outputs['pulumiOutputs.faName'] ]
        apiURL: $[ dependencies.Deploy_Infra.outputs['pulumiOutputs.dssaAPIGW'] ]
        apiGWName: $[ dependencies.Deploy_Infra.outputs['pulumiOutputs.dssaAPIGWName'] ]
        rgName: $[ dependencies.Deploy_Infra.outputs['pulumiOutputs.dssaRG'] ]
        AzureSub: $(AzureSub)
      steps:
        - template: templates/configure_api_gw.yaml
          parameters:
            faName: $(faName)
            apiURL: $(apiURL)
            apiGWName: $(apiGWName)
            rgName: $(rgName)

    - job: "Deploy_UI"
      dependsOn: Deploy_Infra
      condition: succeeded()
      variables:
        apiURL: $[ dependencies.Deploy_Infra.outputs['pulumiOutputs.dssaAPIGW'] ]
        saKey: $[ dependencies.Deploy_Infra.outputs['pulumiOutputs.dssaSaKey']]
        storageAccount: $[ dependencies.Deploy_Infra.outputs['pulumiOutputs.dssaSA']]
        AzureSub: $(AzureSub)
      steps:
        - template: templates/deploy_ui.yaml
          parameters:
            apiURL: $(apiURL)
            saKey: $(saKey)
            storageAccount: $(storageAccount)

    - job: "ImportData"
      dependsOn: Deploy_Infra
      condition: succeeded()
      variables:
        dbString: $[ dependencies.Deploy_Infra.outputs['pulumiOutputs.dssaDBString']]
      steps:
        - template: templates/import_data.yaml
          parameters:
            dbString: $(dbString)

    - job: "Output_Static_URL"
      dependsOn: 
        - ImportData
        - Deploy_UI
        - Configure_API_GW
        - Deploy_API
        - Build_API
        - Deploy_Infra
      condition: and(succeeded('ImportData'),succeeded('Deploy_UI'),succeeded('Configure_API_GW'),succeeded('Deploy_API'),succeeded('Build_API'),succeeded('Deploy_Infra'))
      variables:
        staticURL: $[ dependencies.Deploy_Infra.outputs['pulumiOutputs.dssaStaticURL']]
      steps:
        - template: templates/output_static_url.yaml
          parameters:
            staticURL: $(staticURL)
            AzureSub: $(AzureSub)
                  
